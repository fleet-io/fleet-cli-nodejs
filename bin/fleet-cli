#!/usr/bin/env node

var fleet = require('../lib/index');
const yargs = require('yargs');

yargs
    .command(['inspect-route <routeName>'], "Inspect information about a route in current app", (yargs) => {
        return yargs.positional('routeName', {
                describe: 'Name of route to inspect',
                type: 'string'
            })
            .option('property', {
                describe: 'Route property to filter for such as: url, apiPath, and more',
                alias: 'p',
            })
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'inspct-route',
            time: Date.now()
        }
        fleet.inspectRoute(argv.routeName, argv.property, process.cwd(), correlationData);
    })
    .command(['inspect-routes'], "Display routes in current app", (yargs) => {
        return yargs
        .option('routeName', {
            describe: 'Specific route to inspect',
            alias: 'rn',
        })
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'inspcet-routes',
            time: Date.now()
        }
        fleet.inspectRoutes(argv.routeName, process.cwd(), correlationData);
    })
    .command(['new-website <websiteName>'], "Create a new website", (yargs) => {
        return yargs.positional('websiteName', {
            describe: 'Name used for your website',
            type: 'string'
        });
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'new-website',
            time: Date.now()
        }
        fleet.newWebsite(argv.websiteName, process.cwd(), correlationData);
    })
    .command(['deploy-website <websiteName>'], "Deploy a website", (yargs) => {
        return yargs.positional('websiteName', {
            describe: 'Name used for your website to deploy',
            type: 'string'
        });
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'deploy-website',
            time: Date.now()
        }
        fleet.deployWebsite(argv.websiteName, process.cwd(), correlationData);
    })
    .command(['new-route <routeName> <routeDefinition> <routeType>'], 'Create a new route', (yargs) => {
        return yargs.positional('routeName', {
            describe: 'Name used for your route',
            type: 'string'
        }).positional('routeDefinition', {
            describe: 'Definition of route as it should be exposed in a url, e.g. `api/getUserById/:id`',
            type: 'string'
        }).positional('routeType', {
            describe: 'Type of HTTP Method for this route: GET|POST|PUT|DELETE',
            type: 'string'
        });
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'new-route',
            time: Date.now()
        }
        fleet.newRoute(argv.routeName, argv.routeDefinition, argv.routeType, process.cwd(), correlationData);
    })
    .command(['deploy-route <routeName>'], 'Deploy a route', (yargs) => {
        return yargs.positional('routeName', {
            describe: 'Name used for your route to deploy',
            type: 'string'
        })
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'deploy-route',
            time: Date.now()
        }
        fleet.deployRoute(argv.routeName, process.cwd(), correlationData);
    })
    .command(['undeploy-route <routeName>'], 'Deploy a route', (yargs) => {
        return yargs.positional('routeName', {
            describe: 'Name used for your route to undeploy',
            type: 'string'
        })
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'undeploy-route',
            time: Date.now()
        }
        fleet.undeployRoute(argv.routeName, process.cwd(), correlationData);
    })
    .command(['run-route <routeName>'], 'Locally run a route', (yargs) => {
        return yargs.positional('routeName', {
            describe: 'Name of route to test',
            type: 'string'
        })
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'run-route',
            time: Date.now()
        }
        fleet.runRoute(argv.routeName, process.cwd(), correlationData);
    })
    .command(['delete-fleet'], 'Delete fleet project', (yargs) => {
        return yargs;
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'delete-fleet',
            time: Date.now()
        }
        fleet.deleteFleet(process.cwd(), correlationData);
    })
    .command(['create-fleet <appName>'], 'Create fleet project', (yargs) => {
        return yargs.option('region', {
            alias: 'r',
            default: ['us-east-1'],
            description: 'Deploy to one or more regions',
            type: 'array'
        }).option('global', {
            alias: 'g',
            default: false,
            description: 'Deploy to all available regions',
            type: 'boolean'
        })
    }, (argv) => {
        let correlationData = {
            invokedBy: 'CLI',
            command: 'create-fleet',
            time: Date.now()
        }
        fleet.createFleet(argv.appName, argv.region, argv.global, process.cwd(), correlationData).catch(e => console.log(`Error executing create-fleet command.`, e));
    })
    .help()
    .argv

    process.on('unhandledRejection', (reason, p) => {
        console.log('Unhandled Rejection. Code:', reason.code, 'Message:', reason.message);
    });